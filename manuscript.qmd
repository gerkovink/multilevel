---
title: "Imputation of incomplete multilevel data"
author: "Hanne Oberman"
format: html
---

# Outline

- motivation and intended audience
- the mice framework/package
- background info on missingness mechanisms etc.
- case study

# Intended audience

This tutorial aims to serve analysts who know their way around multilevel modeling, but are not (as) familiar with missing data imputation.

# Introduction

1. missing data occur often in data with human subjects
2. missing data may be resolved, but need to be handled in accordance with the analysis of scientific interest
3. in human-subjects research, there is often clustering, which may be captured with multilevel modeling techniques
4. if the analysis of scientific interest is a multilevel model, the missing data handling method should accommodate the multilevel structure of the data
4. both missingness and multilevel structures require advanced statistical techniques
5. this tutorial sets out to facilitate empirical researchers in accommodating both multilevel structures as well as missing data
6. we illustrate the use of the software by means of a case study

# Methods

The [R]{.proglang} package [mice]{.pkg} provides a framework for imputing incomplete data on a variable-by-variable basis. The [mice]{.fct} function allows users to flexibly specify how many times and under what model the missing data should be imputed. This is reflected in the first four function arguments

```r
mice(data, m, method, predictorMatrix, ...)
```

where `data` refers to the incomplete dataset, `m` determines the number of imputations, `method` denotes the functional form of the imputation model per variable and `predictorMatrix` specifies the interrelational dependencies between the variables and imputation models (i.e., the set of predictors to be used for imputing each incomplete variable).

The object supplied as `data` should be tabular (e.g. a `data.frame` with $n$ rows and $p$ variables, with missing values coded as `NA`). For multilevel imputation models, a numeric clustering variable is required. 

The number of imputations `m` should be determined based on the severity of the missing data problem and the intended analysis model of substantive interest. Van Buuren (2018, $\S$ 2.8) suggests using the default `m = 5` for imputation model building, and to increase `m` as required after initial exploration.

The `method` argument specifies the imputation method to be used for each column in data. If not supplied by the user, `method` defaults to convenient standard methods for single level continuous and categorical data. Since these do not take any clustering or multilevel structures into account, valid imputation of incomplete multilevel data will typically require a user-supplied methods vector. The tables 7.2, 7.3 and 7.4 in van Buuren (2018, $\S$ 7.6, $\S$ 7.7 and $\S$ 7.8, respectively) provide an overview of the available methods to perform univariate multilevel imputation.

With the `predictorMatix` argument, `mice` users can define which columns should be used as predictors in each imputation model. The default predictor matrix is a square binary matrix with the variables to be imputed in the rows and the imputation model predictors in the columns. The default `predictorMatrix` will not be suitable for multilevel data. Univariate imputation methods for two-level data use other codes than `0` and `1`. In the predictor matrix, `-2` denotes the class variable, a value `1` indicates a fixed effect and a value `2` indicates a random effect. Additionally, the method `2l.pan` uses codes `3` and `4` to add class means to codes `1` and `2` respectively.
<!--  -->
<!-- 2l.bin, 2l.lmer, 2l.norm, 2l.pan, 2lonly.mean, 2lonly.norm and 2lonly.pmm use code -2 to indicate the class variable --> -->
<!-- -	2l.bin, 2l.lmer, 2l.norm and 2l.pan use code 2 to indicate the random effects -->
<!-- -	2l.pan uses codes 3 and 4 to add class means to codes 1 and 2 respectively -->

FIMD, section 7.10

> Recipe for a level-1 target:
1.	Define the most general analytic model to be applied to imputed data;
2.	Select a 2l method that imputes close to the data;
3.	Include all level-1 variables;
4.	Include the disaggregated cluster means of all level-1 variables;
5.	Include all level-1 interactions implied by the analytic model;
6.	Include all level-2 predictors;
7.	Include all level-2 interactions implied by the analytic model;
8.	Include all cross-level interactions implied by the analytic model;
9.	Include predictors related to the missingness and the target;
10.	Exclude any terms involving the target

> Recipe for a level-2 target:
1.	Define the most general analytic model to be applied to imputed
data;
2.	Select a 2lonly method that imputes close to the data;
3.	Include the cluster means of all level-1 variables;
4.	Include the cluster means of all level-1 interactions;
5.	Include all level-2 predictors;
6.	Include all interactions of level-2 variables;
7.	Include predictors related to the missingness and the target;
8.	Exclude any terms involving the target

# Case study

1. Load the data, make sure the variables are correctly formatted (e.g. numeric clustering variable)
2. Explore the missingness
2. Fix any cluster-level missingness determinately (note that `2l.only` methods do not work if there are inconsistencies, fix those first!)
2. Re-evaluate the missingness
3. Explore bivariate relations and associations with missingness indicators
4. Determine the imputation methods
5. Create the predictor matrix
6. Impute the incomplete data
7. Evaluate convergence
8. Evaluate imputations
9. Analyse and pool
10. For further multilevel model building, AICs could be pooled, how?

# References


